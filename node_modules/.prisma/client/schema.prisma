datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id               Int       @id @default(autoincrement())
  name             String
  shortText        String
  unitPrice        Int
  isSaleable       Boolean   @default(true)
  picture          String?
  orderMaxQuantity Int?
  allowedProfiles  Profile[] @relation("ProductAllowedProfiles")
  vatRate          Int       @default(0)

  orderArticles OrderArticle[]

  @@map("product")
}

model Profile {
  id    String @id @default(uuid())
  code  String @unique
  label String

  users           User[]
  allowedProducts Product[] @relation("ProductAllowedProfiles")

  @@map("profile")
}

//adress $principal(une seule par user ) //secondaire 

model User {
  id       String  @id @default(uuid())
  username String? @unique
  password String?
  parentId String?
  parent   User?   @relation("ParentChild", fields: [parentId], references: [id])
  children User[]  @relation("ParentChild")

  gender    String?
  isAdmin   Boolean   @default(false)
  name      String?
  profiles  Profile[]
  firstname String?
  birthdate DateTime?
  addresses Address[]
  createdAt DateTime  @default(now()) @map("created_at")

  ordersAsUser     Order[] @relation("UserOrder")
  ordersAsCustomer Order[] @relation("CustomerOrder")

  @@map("user")
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  postalCode String
  country    String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("address")
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  customerId     String
  createdAt      DateTime       @default(now())
  totalAmount    Int
  totalVatAmount Int
  totalHtAmount  Float?
  status         OrderStatus    @default(CREATED)
  articles       OrderArticle[]
  user           User           @relation("UserOrder", fields: [userId], references: [id])
  customer       User           @relation("CustomerOrder", fields: [customerId], references: [id])
  isDeleted      Boolean        @default(false)
}

model OrderArticle {
  id            String                 @id @default(uuid())
  orderId       String
  productId     Int
  quantity      Int
  unitPrice     Int
  order         Order                  @relation(fields: [orderId], references: [id])
  product       Product                @relation(fields: [productId], references: [id])
  justification JustificationDocument?
}

enum OrderStatus {
  CREATED
  PAID
  CANCELLED
}

enum JustificationStatus {
  A_VALIDER
  VALIDE
  REFUSE
}

model JustificationDocument {
  id             Int                 @id @default(autoincrement())
  orderArticleId String              @unique
  orderArticle   OrderArticle        @relation(fields: [orderArticleId], references: [id])
  path           String
  originalName   String
  mimeType       String
  size           Int
  status         JustificationStatus @default(A_VALIDER)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}
